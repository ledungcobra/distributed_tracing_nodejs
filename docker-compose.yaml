version: "3.7"
services:
  tempo:
    image: grafana/tempo:latest
    volumes:
      - ./tempo.yaml:/etc/tempo.yml
      - new_tempo_data:/var/tempo
    ports:
      - "3200:3200" # tempo gafana
      # - "4319:4317" # otlp grpc
    entrypoint: sh -c "exec /tempo -config.file=/etc/tempo.yml"

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver
    depends_on:
      - tempo

  # jaeger:
  #   image: jaegertracing/all-in-one:latest
  #   ports:
  #     - "6831:6831/udp" # UDP port for Jaeger agent
  #     - "16686:16686" # Web UI & Datasource for Gafana
  #     - "14268:14268" # HTTP port for spans
  loki:
    image: bitnami/grafana-loki:3.2.0
    ports:
      - "3100:3100" # HTTP port for Loki
    volumes:
      - ./loki-config.yaml:/bitnami/grafana-loki/conf/loki.yaml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
  grafana:
    image: grafana/grafana:11.3.0
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "5000:3000"
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        - name: Prometheus
          type: prometheus
          access: proxy
          isDefault: false
          version: 1
          editable: false
          url: http://prometheus:9090
        EOF
        /run.sh
  rabbitmq:
    image: rabbitmq:3-management # Use the RabbitMQ image with the management plugin
    container_name: rabbitmq
    ports:
      - "5672:5672" # Default RabbitMQ port
      - "15672:15672" # Management console port
    environment:
      RABBITMQ_DEFAULT_USER: user # Default username
      RABBITMQ_DEFAULT_PASS: password # Default password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # Persist data
  app:
    build:
      context: .
      dockerfile: Dockerfile.producer
    volumes:
      - ./:/app
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      RABBITMQ_ENDPOINT: amqp://user:password@rabbitmq
      SERVICE_NAME: tracing-service
    depends_on:
      - rabbitmq
      - otel-collector
      - loki
      - prometheus
      - grafana
    ports:
      - "4000:4000"
      - "9464:9464"

  # postgres:
  #   image: postgres:16.1
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./sql-data:/docker-entrypoint-initdb.d
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres

  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer1
    depends_on:
      - rabbitmq
      - otel-collector
      - loki
      - prometheus
      - grafana
    volumes:
      - ./:/app
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      RABBITMQ_ENDPOINT: amqp://user:password@rabbitmq
      SERVICE_NAME: tracing-consumer

volumes:
  rabbitmq_data:
  loki_data:
  grafana_data:
  new_tempo_data:
  postgres_data:
